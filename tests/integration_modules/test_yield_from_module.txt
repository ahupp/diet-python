$ desugars yield_from_module

def child():
    events = []
    try:
        value = yield "start"
        events.append(("send", value))
        while True:
            try:
                value = yield value
                events.append(("send", value))
            except KeyError as exc:
                events.append(("throw", str(exc)))
                value = "handled"
            if value == "stop":
                break
    finally:
        events.append(("finally", None))
    return events


def delegator():
    result = yield from child()
    return ("done", result)
=
import __dp__
def child():
    events = __dp__.list(())
    try:
        value = yield "start"
        events.append(("send", value))
        while True:
            try:
                value = yield value
                events.append(("send", value))
            except:
                if __dp__.isinstance(__dp__.current_exception(), KeyError):
                    exc = __dp__.current_exception()
                    events.append(("throw", str(exc)))
                    value = "handled"
                else:
                    raise
            _dp_tmp_1 = __dp__.eq(value, "stop")
            if _dp_tmp_1:
                break
    finally:
        events.append(("finally", None))
    return events
def delegator():
    _dp_yield_from_state_3 = __dp__.yield_from_init(child())
    _dp_yield_from_sent_4 = None
    while True:
        _dp_tmp_5 = __dp__.ne(__dp__.getitem(_dp_yield_from_state_3, 0), __dp__.RUNNING)
        if _dp_tmp_5:
            break
        try:
            _dp_yield_from_sent_4 = yield __dp__.getitem(_dp_yield_from_state_3, 1)
        except:
            _dp_yield_from_state_3 = __dp__.yield_from_except(_dp_yield_from_state_3, __dp__.current_exception())
        else:
            _dp_yield_from_state_3 = __dp__.yield_from_next(_dp_yield_from_state_3, _dp_yield_from_sent_4)
    _dp_tmp_2 = __dp__.getitem(_dp_yield_from_state_3, 1)
    result = _dp_tmp_2
    return "done", result
