$ desugars typing_nested_class_repr

"""Demonstrates loss of the enclosing class name in nested class repr."""

from typing import Any

class Container:
    def make(self) -> str:
        class Sub(Any):
            pass
        return repr(Sub)

VALUE = Container().make()
=
"""Demonstrates loss of the enclosing class name in nested class repr."""
import __dp__
Any = __dp__.import_("typing", __spec__, __dp__.list(("Any",))).Any
def _dp_ns_Container(_dp_class_ns):

    def make(self) -> str:

        def _dp_ns_Container_make__locals__Sub(_dp_class_ns):
            __dp__.setattr(_dp_class_ns, "__module__", __name__)
            __dp__.setattr(_dp_class_ns, "__qualname__", "Container.make.<locals>.Sub")
        Sub = __dp__.create_class("Sub", _dp_ns_Container_make__locals__Sub, (Any,), None)
        del _dp_ns_Container_make__locals__Sub
        return repr(Sub)
    __dp__.setattr(_dp_class_ns, "make", make)
    __dp__.setattr(_dp_class_ns, "__module__", __name__)
    __dp__.setattr(_dp_class_ns, "__qualname__", "Container")
Container = __dp__.create_class("Container", _dp_ns_Container, (), None)
del _dp_ns_Container
VALUE = Container().make()
