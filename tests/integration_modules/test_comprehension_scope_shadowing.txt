$ desugars comprehension_scope_shadowing

from enum import Enum


class Scope(Enum):
    Function = "function"
    Module = "module"


HIGH_SCOPES = [scope for scope in Scope if scope is Scope.Function]
FUNCTION_MEMBERS = [Scope.Function for scope in Scope if scope is Scope.Function]
=
import __dp__
Enum = __dp__.import_("enum", __spec__, __dp__.list(("Enum",))).Enum
def _dp_ns_Scope(_dp_class_ns):
    __dp__.setattr(_dp_class_ns, "Function", "function")
    __dp__.setattr(_dp_class_ns, "Module", "module")
    __dp__.setattr(_dp_class_ns, "__module__", __name__)
    __dp__.setattr(_dp_class_ns, "__qualname__", "Scope")
Scope = __dp__.create_class("Scope", _dp_ns_Scope, (Enum,), None)
del _dp_ns_Scope
def _dp_gen_1(_dp_iter_2):
    _dp_iter_3 = __dp__.iter(_dp_iter_2)
    while True:
        try:
            scope = __dp__.next(_dp_iter_3)
        except:
            __dp__.check_stopiteration()
            break
        else:
            _dp_tmp_4 = __dp__.is_(scope, Scope.Function)
            if _dp_tmp_4:
                yield scope
HIGH_SCOPES = __dp__.list(_dp_gen_1(__dp__.iter(Scope)))
def _dp_gen_5(_dp_iter_6):
    _dp_iter_7 = __dp__.iter(_dp_iter_6)
    while True:
        try:
            scope = __dp__.next(_dp_iter_7)
        except:
            __dp__.check_stopiteration()
            break
        else:
            _dp_tmp_8 = __dp__.is_(scope, Scope.Function)
            if _dp_tmp_8:
                yield Scope.Function
FUNCTION_MEMBERS = __dp__.list(_dp_gen_5(__dp__.iter(Scope)))
