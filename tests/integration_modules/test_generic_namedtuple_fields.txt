$ desugars generic_namedtuple_fields

from __future__ import annotations

import collections
import sys
from typing import TYPE_CHECKING, Generic, NamedTuple, TypeVar, final

AnyStr = TypeVar("AnyStr", str, bytes)

if sys.version_info >= (3, 11) or TYPE_CHECKING:

    @final
    class CaptureResult(NamedTuple, Generic[AnyStr]):
        """The result of the capture helper."""

        out: AnyStr
        err: AnyStr

else:

    class CaptureResult(
        collections.namedtuple("CaptureResult", ["out", "err"]),  # noqa: PYI024
        Generic[AnyStr],
    ):
        __slots__ = ()


RESULT = CaptureResult("out", "err")
=
import __dp__
collections = __dp__.import_("collections", __spec__)
sys = __dp__.import_("sys", __spec__)
TYPE_CHECKING = __dp__.import_("typing", __spec__, __dp__.list(("TYPE_CHECKING",))).TYPE_CHECKING
Generic = __dp__.import_("typing", __spec__, __dp__.list(("Generic",))).Generic
NamedTuple = __dp__.import_("typing", __spec__, __dp__.list(("NamedTuple",))).NamedTuple
TypeVar = __dp__.import_("typing", __spec__, __dp__.list(("TypeVar",))).TypeVar
final = __dp__.import_("typing", __spec__, __dp__.list(("final",))).final
AnyStr = TypeVar("AnyStr", str, bytes)
_dp_tmp_3 = __dp__.ge(sys.version_info, (3, 11))
_dp_tmp_1 = _dp_tmp_3
if __dp__.not_(_dp_tmp_1):
    _dp_tmp_1 = TYPE_CHECKING
if _dp_tmp_1:

    def _dp_ns_CaptureResult(_dp_class_ns):
        __dp__.setitem(_dp_class_ns, "__doc__", """The result of the capture helper.""")
        __dp__.setitem(_dp_class_ns, "__module__", __name__)
        __dp__.setitem(_dp_class_ns, "__qualname__", "CaptureResult")
        _dp_class_annotations = _dp_class_ns.get("__annotations__")
        _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
        if _dp_tmp_2:
            _dp_class_annotations = __dp__.dict()
        __dp__.setitem(_dp_class_ns, "__annotations__", _dp_class_annotations)
        __dp__.setitem(_dp_class_annotations, "out", "AnyStr")
        __dp__.setitem(_dp_class_annotations, "err", "AnyStr")
    CaptureResult = __dp__.create_class("CaptureResult", _dp_ns_CaptureResult, (NamedTuple, __dp__.getitem(Generic, AnyStr)), None)
    CaptureResult = final(CaptureResult)
    del _dp_ns_CaptureResult
else:

    def _dp_ns_CaptureResult(_dp_class_ns):
        __dp__.setitem(_dp_class_ns, "__slots__", ())
        __dp__.setitem(_dp_class_ns, "__module__", __name__)
        __dp__.setitem(_dp_class_ns, "__qualname__", "CaptureResult")
    CaptureResult = __dp__.create_class("CaptureResult", _dp_ns_CaptureResult, (collections.namedtuple("CaptureResult", __dp__.list(("out", "err"))), __dp__.getitem(Generic, AnyStr)), None)
    del _dp_ns_CaptureResult
RESULT = CaptureResult("out", "err")
