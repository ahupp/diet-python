$ rewrites function decorators

@dec2(5)
@dec1
def foo():
    pass
=
_dp_tmp_1 = dec2(5)
def foo():
    pass
foo = _dp_tmp_1(dec1(foo))
$ preserves annotations on decorated functions

@dec
def foo(x: int) -> str:
    pass
=
def foo(x: int) -> str:
    pass
foo = dec(foo)
$ rewrites class decorators

@dec
class C:
    pass
=
def _dp_ns_C(_dp_class_ns):
    __dp__.setattr(_dp_class_ns, "__module__", __name__)
    __dp__.setattr(_dp_class_ns, "__qualname__", "C")
C = __dp__.create_class("C", _dp_ns_C, (), None)
C = dec(C)
del _dp_ns_C
$ rewrites multiple class decorators

@dec2(5)
@dec1
class C:
    pass
=
_dp_tmp_1 = dec2(5)
def _dp_ns_C(_dp_class_ns):
    __dp__.setattr(_dp_class_ns, "__module__", __name__)
    __dp__.setattr(_dp_class_ns, "__qualname__", "C")
C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_tmp_1(dec1(C))
del _dp_ns_C
$ preserves existing decorator targets

atexit = property(lambda: None)

@atexit.setter
def atexit(value):
    pass
=
def _dp_lambda_1():
    return None
atexit = property(_dp_lambda_1)
_dp_tmp_2 = atexit.setter
def atexit(value):
    pass
atexit = _dp_tmp_2(atexit)
