$ rewrites function decorators

@dec2(5)
@dec1
def foo():
    pass
=
_dp_decorator_foo_0 = dec2(5)
_dp_decorator_foo_1 = dec1
def foo():
    pass
foo = _dp_decorator_foo_0(_dp_decorator_foo_1(foo))
$ preserves annotations on decorated functions

@dec
def foo(x: int) -> str:
    pass
=
_dp_decorator_foo_0 = dec
def foo(x: int) -> str:
    pass
foo = _dp_decorator_foo_0(foo)
$ rewrites class decorators

@dec
class C:
    pass
=
_dp_decorator__dp_class_C_0 = dec
def _dp_ns_C(_dp_prepare_ns, _dp_add_binding):
    _dp_add_binding("__module__", __name__)
    _dp_add_binding("__qualname__", "C")
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
_dp_class_C = _dp_decorator__dp_class_C_0(_dp_class_C)
C = _dp_class_C
$ rewrites multiple class decorators

@dec2(5)
@dec1
class C:
    pass
=
_dp_decorator__dp_class_C_0 = dec2(5)
_dp_decorator__dp_class_C_1 = dec1
def _dp_ns_C(_dp_prepare_ns, _dp_add_binding):
    _dp_add_binding("__module__", __name__)
    _dp_add_binding("__qualname__", "C")
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
_dp_class_C = _dp_decorator__dp_class_C_0(_dp_decorator__dp_class_C_1(_dp_class_C))
C = _dp_class_C
$ preserves existing decorator targets

atexit = property(lambda: None)

@atexit.setter
def atexit(value):
    pass
=
def _dp_lambda_1():
    return None
atexit = property(_dp_lambda_1)
_dp_decorator_atexit_0 = atexit.setter
def atexit(value):
    pass
atexit = _dp_decorator_atexit_0(atexit)
