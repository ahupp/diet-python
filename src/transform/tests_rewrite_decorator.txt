$ rewrites function decorators

@dec2(5)
@dec1
def foo():
    pass
=
def _dp_dec_apply_1(_dp_the_func):
    return dec2(5)(dec1(_dp_the_func))
def foo():
    pass
foo = _dp_dec_apply_1(foo)

$ rewrites class decorators

@dec
class C:
    pass
=
def _dp_class_decorators_C(_dp_the_func):
    return dec(_dp_the_func)
def _dp_ns_C(_ns):
    _dp_temp_ns = __dp__.dict(())
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_ns, "__qualname__", _dp_tmp_1)
def _dp_make_class_C():
    orig_bases = ()
    bases = __dp__.resolve_bases(orig_bases)
    _dp_tmp_2 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_2, 0)
    ns = __dp__.getitem(_dp_tmp_2, 1)
    kwds = __dp__.getitem(_dp_tmp_2, 2)
    _dp_ns_C(ns)
    _dp_tmp_4 = __dp__.is_not(orig_bases, bases)
    _dp_tmp_3 = _dp_tmp_4
    if _dp_tmp_3:
        _dp_tmp_5 = __dp__.not_(__dp__.contains(ns, "__orig_bases__"))
        _dp_tmp_3 = _dp_tmp_5
    if _dp_tmp_3:
        __dp__.setitem(ns, "__orig_bases__", orig_bases)
    return meta("C", bases, ns, **kwds)
_dp_class_C = _dp_make_class_C()
C = _dp_class_decorators_C(_dp_class_C)

$ rewrites multiple class decorators

@dec2(5)
@dec1
class C:
    pass
=
def _dp_class_decorators_C(_dp_the_func):
    return dec2(5)(dec1(_dp_the_func))
def _dp_ns_C(_ns):
    _dp_temp_ns = __dp__.dict(())
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_ns, "__qualname__", _dp_tmp_1)
def _dp_make_class_C():
    orig_bases = ()
    bases = __dp__.resolve_bases(orig_bases)
    _dp_tmp_2 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_2, 0)
    ns = __dp__.getitem(_dp_tmp_2, 1)
    kwds = __dp__.getitem(_dp_tmp_2, 2)
    _dp_ns_C(ns)
    _dp_tmp_4 = __dp__.is_not(orig_bases, bases)
    _dp_tmp_3 = _dp_tmp_4
    if _dp_tmp_3:
        _dp_tmp_5 = __dp__.not_(__dp__.contains(ns, "__orig_bases__"))
        _dp_tmp_3 = _dp_tmp_5
    if _dp_tmp_3:
        __dp__.setitem(ns, "__orig_bases__", orig_bases)
    return meta("C", bases, ns, **kwds)
_dp_class_C = _dp_make_class_C()
C = _dp_class_decorators_C(_dp_class_C)
