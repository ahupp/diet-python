$ expr 001
[a, *b, c] = d
=

a = __dp__.getitem(d, 0)
b = __dp__.list(__dp__.getitem(d, slice(1, __dp__.neg(1), None)))
c = __dp__.getitem(d, __dp__.neg(1))


$ expr 002
[a, *b] = c
=

a = __dp__.getitem(c, 0)
b = __dp__.list(__dp__.getitem(c, slice(1, None, None)))


$ expr 003
[a, b] = c
=

a = __dp__.getitem(c, 0)
b = __dp__.getitem(c, 1)


$ expr 004
[*a, b] = c
=

a = __dp__.list(__dp__.getitem(c, slice(0, __dp__.neg(1), None)))
b = __dp__.getitem(c, __dp__.neg(1))


$ expr 005
a, b = c
=

a = __dp__.getitem(c, 0)
b = __dp__.getitem(c, 1)


$ expr 006
a, *b, c = d
=

a = __dp__.getitem(d, 0)
b = __dp__.tuple(__dp__.getitem(d, slice(1, __dp__.neg(1), None)))
c = __dp__.getitem(d, __dp__.neg(1))


$ expr 007
*a, b = c
=

a = __dp__.tuple(__dp__.getitem(c, slice(0, __dp__.neg(1), None)))
b = __dp__.getitem(c, __dp__.neg(1))


$ expr 008
a, *b = c
=

a = __dp__.getitem(c, 0)
b = __dp__.tuple(__dp__.getitem(c, slice(1, None, None)))


$ expr 009
raise ValueError
=
raise ValueError

$ expr 010
x: int
=


$ expr 011
x: int = 1
=
x = 1

$ expr 012
obj.attr
=
obj.attr

$ expr 013
foo.bar.baz
=
foo.bar.baz

$ expr 014
a.b = c
=

__dp__.setattr(a, "b", c)


$ expr 015
a.b += c
=
__dp__.setattr(a, "b", __dp__.iadd(a.b, c))

$ expr 016

x = 1
x += 2

=

x = 1
x = __dp__.iadd(x, 2)


$ expr 017
a + b
=
__dp__.add(a, b)

$ expr 018
x = a and b
=

_dp_tmp_1 = a
if _dp_tmp_1:
    _dp_tmp_1 = b
x = _dp_tmp_1


$ expr 019
a - b
=
__dp__.sub(a, b)

$ expr 020
a or b
=

_dp_tmp_1 = a
if __dp__.not_(_dp_tmp_1):
    _dp_tmp_1 = b
_dp_tmp_1


$ expr 021
a = b = c
=

a = c
b = c


$ expr 022
a[0] = b = 1
=

__dp__.setitem(a, 0, 1)
b = 1


$ expr 023
a == b
=

_dp_tmp_1 = __dp__.eq(a, b)
_dp_tmp_1


$ expr 024
x = a or b
=

_dp_tmp_1 = a
if __dp__.not_(_dp_tmp_1):
    _dp_tmp_1 = b
x = _dp_tmp_1


$ expr 025
a and b
=

_dp_tmp_1 = a
if _dp_tmp_1:
    _dp_tmp_1 = b
_dp_tmp_1


$ expr 026
a != b
=

_dp_tmp_1 = __dp__.ne(a, b)
_dp_tmp_1


$ expr 027
a < b
=

_dp_tmp_1 = __dp__.lt(a, b)
_dp_tmp_1


$ expr 028
f() or a
=

_dp_tmp_1 = f()
if __dp__.not_(_dp_tmp_1):
    _dp_tmp_1 = a
_dp_tmp_1


$ expr 029
a <= b
=

_dp_tmp_1 = __dp__.le(a, b)
_dp_tmp_1


$ expr 030
a > b
=

_dp_tmp_1 = __dp__.gt(a, b)
_dp_tmp_1


$ expr 031
a >= b
=

_dp_tmp_1 = __dp__.ge(a, b)
_dp_tmp_1


$ expr 032
f() and a
=

_dp_tmp_1 = f()
if _dp_tmp_1:
    _dp_tmp_1 = a
_dp_tmp_1


$ expr 033
a is b
=

_dp_tmp_1 = __dp__.is_(a, b)
_dp_tmp_1


$ expr 034
a is not b
=

_dp_tmp_1 = __dp__.is_not(a, b)
_dp_tmp_1


$ expr 035
a = 1j
=
a = complex(0.0, 1.0)

$ expr 036
del a.b
=
__dp__.delattr(a, "b")

$ expr 037
del a.b[1].c
=
__dp__.delattr(__dp__.getitem(a.b, 1), "c")

$ expr 038
del a[b]
=
__dp__.delitem(a, b)

$ expr 039
a = 1 + 2j
=
a = __dp__.add(1, complex(0.0, 2.0))

$ expr 040
a in b
=

_dp_tmp_1 = __dp__.contains(b, a)
_dp_tmp_1


$ expr 041
r = {k: v + 1 for k, v in items if k % 2 == 0}
=

def _dp_gen_1(items):
    _dp_iter_2 = __dp__.iter(items)
    while True:
        try:
            _dp_tmp_3 = __dp__.next(_dp_iter_2)
            k = __dp__.getitem(_dp_tmp_3, 0)
            v = __dp__.getitem(_dp_tmp_3, 1)
        except:
            __dp__.check_stopiteration()
            break
        else:
            _dp_tmp_4 = __dp__.eq(__dp__.mod(k, 2), 0)
            if _dp_tmp_4:
                yield k, __dp__.add(v, 1)
r = __dp__.dict(_dp_gen_1(__dp__.iter(items)))


$ expr 042
a = {'a': 1, 'b': 2}
=

a = __dp__.dict((('a', 1), ('b', 2)))


$ expr 043
a not in b
=

_dp_tmp_1 = __dp__.not_(__dp__.contains(b, a))
_dp_tmp_1


$ expr 044
a = {**b, 'c': 2}
=
a = __dp__.or_(__dp__.dict(b), __dp__.dict((('c', 2),)))

$ expr 045
a = {**b}
=
a = __dp__.dict(b)

$ expr 046
a = {'a': 1, **b, 'c': 2}
=
a = __dp__.or_(__dp__.or_(__dp__.dict((('a', 1),)), __dp__.dict(b)), __dp__.dict((('c', 2),)))

$ expr 047
a = ...
=
a = Ellipsis

$ expr 048
a[b]
=
__dp__.getitem(a, b)

$ expr 049

a if b else c

=

if b:
    _dp_tmp_1 = a
else:
    _dp_tmp_1 = c
_dp_tmp_1


$ expr 050
...
=
Ellipsis

$ expr 051
r = [a + 1 for a in items if a % 2 == 0]
=

def _dp_gen_1(items):
    _dp_iter_2 = __dp__.iter(items)
    while True:
        try:
            a = __dp__.next(_dp_iter_2)
        except:
            __dp__.check_stopiteration()
            break
        else:
            _dp_tmp_3 = __dp__.eq(__dp__.mod(a, 2), 0)
            if _dp_tmp_3:
                yield __dp__.add(a, 1)
r = __dp__.list(_dp_gen_1(__dp__.iter(items)))


$ expr 052
a = [1, 2, 3]
=

a = __dp__.list((1, 2, 3))


$ expr 053

(a + 1) if f() else (b + 2)

=

if f():
    _dp_tmp_1 = __dp__.add(a, 1)
else:
    _dp_tmp_1 = __dp__.add(b, 2)
_dp_tmp_1


$ expr 054
a = [1, *b, 2]
=
a = __dp__.list(__dp__.add(__dp__.add((1,), __dp__.tuple(b)), (2,)))

$ expr 055
while start <= limit:
    start += 1
=

while True:
    _dp_tmp_1 = __dp__.le(start, limit)
    if __dp__.not_(_dp_tmp_1):
        break
    start = __dp__.iadd(start, 1)

$ expr 055
a or b or c
=

_dp_tmp_1 = a
if __dp__.not_(_dp_tmp_1):
    _dp_tmp_1 = b
if __dp__.not_(_dp_tmp_1):
    _dp_tmp_1 = c
_dp_tmp_1


$ expr 056
del a[0], b[0]
=

__dp__.delitem(a, 0)
__dp__.delitem(b, 0)


$ expr 057
r = [a * b for a in items for b in items2]
=

def _dp_gen_1(items):
    _dp_iter_2 = __dp__.iter(items)
    while True:
        try:
            a = __dp__.next(_dp_iter_2)
        except:
            __dp__.check_stopiteration()
            break
        else:
            _dp_iter_3 = __dp__.iter(items2)
            while True:
                try:
                    b = __dp__.next(_dp_iter_3)
                except:
                    __dp__.check_stopiteration()
                    break
                else:
                    yield __dp__.mul(a, b)
r = __dp__.list(_dp_gen_1(__dp__.iter(items)))


$ expr 058
del a.b[1]
=
__dp__.delitem(a.b, 1)

$ expr 059
raise ValueError from exc
=
raise __dp__.raise_from(ValueError, exc)

$ expr 060
r = {a for a in items}
=

def _dp_gen_1(items):
    _dp_iter_2 = __dp__.iter(items)
    while True:
        try:
            a = __dp__.next(_dp_iter_2)
        except:
            __dp__.check_stopiteration()
            break
        else:
            yield a
r = __dp__.set(_dp_gen_1(__dp__.iter(items)))


$ expr 061
a and b and c
=

_dp_tmp_1 = a
if _dp_tmp_1:
    _dp_tmp_1 = b
if _dp_tmp_1:
    _dp_tmp_1 = c
_dp_tmp_1


$ expr 062
a = {1, 2, 3}
=

a = __dp__.set((1, 2, 3))


$ expr 063
a[1:2:3]
=
__dp__.getitem(a, slice(1, 2, 3))

$ expr 064
a[1:2]
=
__dp__.getitem(a, slice(1, 2, None))

$ expr 065
a[b] = c
=

__dp__.setitem(a, b, c)


$ expr 066
a[:2]
=
__dp__.getitem(a, slice(None, 2, None))

$ expr 067
a = (1, *b, 2)
=
a = __dp__.add(__dp__.add((1,), __dp__.tuple(b)), (2,))

$ expr 068
-a
=
__dp__.neg(a)

$ expr 069
a[::2]
=
__dp__.getitem(a, slice(None, None, 2))

$ expr 070
~b
=
__dp__.invert(b)

$ expr 071
not c
=
__dp__.not_(c)

$ expr 072
+a
=
__dp__.pos(a)

$ expr 073
a[:]
=
__dp__.getitem(a, slice(None, None, None))

$ expr 074
def f():
    if a:
        return 1
    elif b:
        return 2
    else:
        return 3
=
def f():
    if a:
        return 1
    else:
        if b:
            return 2
        else:
            return 3

