$ lowers simple class

class C:
    x = 1
=
def _dp_ns_C(_ns):
    _dp_temp_ns = dict(())
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_dp_temp_ns, "x", 1)
    __dp__.setitem(_ns, "x", 1)
def _dp_make_class_C():
    bases = __dp__.resolve_bases(())
    _dp_tmp_2 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_2, 0)
    ns = __dp__.getitem(_dp_tmp_2, 1)
    kwds = __dp__.getitem(_dp_tmp_2, 2)
    _dp_ns_C(ns)
    return meta("C", bases, ns, **kwds)
_dp_tmp_3 = _dp_make_class_C()
C = _dp_tmp_3
_dp_class_C = _dp_tmp_3

$ lowers inherits

class C(B):
    pass
=
def _dp_ns_C(_ns):
    _dp_temp_ns = dict(())
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_ns, "__qualname__", _dp_tmp_1)
    pass
def _dp_make_class_C():
    bases = __dp__.resolve_bases((B,))
    _dp_tmp_2 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_2, 0)
    ns = __dp__.getitem(_dp_tmp_2, 1)
    kwds = __dp__.getitem(_dp_tmp_2, 2)
    _dp_ns_C(ns)
    return meta("C", bases, ns, **kwds)
_dp_tmp_3 = _dp_make_class_C()
C = _dp_tmp_3
_dp_class_C = _dp_tmp_3

$ lowers with docstring and keywords

class C(B, metaclass=Meta, kw=1):
    'doc'
    x = 2
=
def _dp_ns_C(_ns):
    _dp_temp_ns = dict(())
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_ns, "__qualname__", _dp_tmp_1)
    _dp_tmp_2 = 'doc'
    __dp__.setitem(_dp_temp_ns, "__doc__", _dp_tmp_2)
    __dp__.setitem(_ns, "__doc__", _dp_tmp_2)
    __dp__.setitem(_dp_temp_ns, "x", 2)
    __dp__.setitem(_ns, "x", 2)
def _dp_make_class_C():
    bases = __dp__.resolve_bases((B,))
    _dp_tmp_3 = __dp__.prepare_class("C", bases, dict((("metaclass", Meta), ("kw", 1))))
    meta = __dp__.getitem(_dp_tmp_3, 0)
    ns = __dp__.getitem(_dp_tmp_3, 1)
    kwds = __dp__.getitem(_dp_tmp_3, 2)
    _dp_ns_C(ns)
    return meta("C", bases, ns, **kwds)
_dp_tmp_4 = _dp_make_class_C()
C = _dp_tmp_4
_dp_class_C = _dp_tmp_4

$ lowers method

class C:
    def m(self):
        return 1
=
def _dp_ns_C(_ns):
    _dp_temp_ns = dict(())
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_ns, "__qualname__", _dp_tmp_1)

    def _dp_mk_m():

        def m(self):
            return 1
        __dp__.setattr(m, "__qualname__", __dp__.add(__dp__.getitem(_ns, "__qualname__"), ".m"))
        return m
    m = _dp_mk_m()
    __dp__.setitem(_dp_temp_ns, "m", m)
    __dp__.setitem(_ns, "m", m)
def _dp_make_class_C():
    bases = __dp__.resolve_bases(())
    _dp_tmp_2 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_2, 0)
    ns = __dp__.getitem(_dp_tmp_2, 1)
    kwds = __dp__.getitem(_dp_tmp_2, 2)
    _dp_ns_C(ns)
    return meta("C", bases, ns, **kwds)
_dp_tmp_3 = _dp_make_class_C()
C = _dp_tmp_3
_dp_class_C = _dp_tmp_3

$ rewrites super and class

class C:
    def m(self):
        return super().m()
=
def _dp_ns_C(_ns):
    _dp_temp_ns = dict(())
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_ns, "__qualname__", _dp_tmp_1)

    def _dp_mk_m():

        def m(self):
            __class__ = _dp_class_C
            return super(self, __class__).m()
        __dp__.setattr(m, "__qualname__", __dp__.add(__dp__.getitem(_ns, "__qualname__"), ".m"))
        return m
    m = _dp_mk_m()
    __dp__.setitem(_dp_temp_ns, "m", m)
    __dp__.setitem(_ns, "m", m)
def _dp_make_class_C():
    bases = __dp__.resolve_bases(())
    _dp_tmp_2 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_2, 0)
    ns = __dp__.getitem(_dp_tmp_2, 1)
    kwds = __dp__.getitem(_dp_tmp_2, 2)
    _dp_ns_C(ns)
    return meta("C", bases, ns, **kwds)
_dp_tmp_3 = _dp_make_class_C()
C = _dp_tmp_3
_dp_class_C = _dp_tmp_3

$ rewrites super uses first arg

class C:
    def m(z):
        return super().m()
=
def _dp_ns_C(_ns):
    _dp_temp_ns = dict(())
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_ns, "__qualname__", _dp_tmp_1)

    def _dp_mk_m():

        def m(z):
            __class__ = _dp_class_C
            return super(z, __class__).m()
        __dp__.setattr(m, "__qualname__", __dp__.add(__dp__.getitem(_ns, "__qualname__"), ".m"))
        return m
    m = _dp_mk_m()
    __dp__.setitem(_dp_temp_ns, "m", m)
    __dp__.setitem(_ns, "m", m)
def _dp_make_class_C():
    bases = __dp__.resolve_bases(())
    _dp_tmp_2 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_2, 0)
    ns = __dp__.getitem(_dp_tmp_2, 1)
    kwds = __dp__.getitem(_dp_tmp_2, 2)
    _dp_ns_C(ns)
    return meta("C", bases, ns, **kwds)
_dp_tmp_3 = _dp_make_class_C()
C = _dp_tmp_3
_dp_class_C = _dp_tmp_3

$ applies decorators in namespace

class C:
    y = deco

    @decorator(y)
    @other
    def m(self):
        return self
=
def _dp_ns_C(_ns):
    _dp_temp_ns = dict(())
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_dp_temp_ns, "y", deco)
    __dp__.setitem(_ns, "y", deco)
    _dp_dec_m_0 = decorator(y)
    _dp_dec_m_1 = other

    def _dp_mk_m():

        def m(self):
            return self
        __dp__.setattr(m, "__qualname__", __dp__.add(__dp__.getitem(_ns, "__qualname__"), ".m"))
        return m
    m = _dp_mk_m()
    m = _dp_dec_m_1(m)
    m = _dp_dec_m_0(m)
    __dp__.setitem(_dp_temp_ns, "m", m)
    __dp__.setitem(_ns, "m", m)
def _dp_make_class_C():
    bases = __dp__.resolve_bases(())
    _dp_tmp_2 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_2, 0)
    ns = __dp__.getitem(_dp_tmp_2, 1)
    kwds = __dp__.getitem(_dp_tmp_2, 2)
    _dp_ns_C(ns)
    return meta("C", bases, ns, **kwds)
_dp_tmp_3 = _dp_make_class_C()
C = _dp_tmp_3
_dp_class_C = _dp_tmp_3
