$ lowers simple class

class C:
    x = 1
=
def _dp_ns_C(_dp_prepare_ns):
    _dp_temp_ns = __dp__.dict()
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_dp_prepare_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_dp_prepare_ns, "__qualname__", _dp_tmp_1)
    _dp_class_annotations = _dp_temp_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()
    x = 1
    __dp__.setitem(_dp_temp_ns, "x", x)
    __dp__.setitem(_dp_prepare_ns, "x", x)
def _dp_make_class_C():
    orig_bases = ()
    bases = __dp__.resolve_bases(orig_bases)
    _dp_tmp_3 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_3, 0)
    ns = __dp__.getitem(_dp_tmp_3, 1)
    kwds = __dp__.getitem(_dp_tmp_3, 2)
    _dp_ns_C(ns)
    _dp_tmp_5 = __dp__.is_not(orig_bases, bases)
    _dp_tmp_4 = _dp_tmp_5
    if _dp_tmp_4:
        _dp_tmp_6 = __dp__.not_(__dp__.contains(ns, "__orig_bases__"))
        _dp_tmp_4 = _dp_tmp_6
    if _dp_tmp_4:
        __dp__.setitem(ns, "__orig_bases__", orig_bases)
    return meta("C", bases, ns, **kwds)
_dp_class_C = _dp_make_class_C()
C = _dp_class_C

$ collects class annotations

class C:
    x: int
    y: str = 1
=
def _dp_ns_C(_dp_prepare_ns):
    _dp_temp_ns = __dp__.dict()
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_dp_prepare_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_dp_prepare_ns, "__qualname__", _dp_tmp_1)
    _dp_class_annotations = _dp_temp_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()
    _dp_tmp_3 = __dp__.is_(_dp_temp_ns.get("__annotations__"), None)
    if _dp_tmp_3:
        __dp__.setitem(_dp_temp_ns, "__annotations__", _dp_class_annotations)
    __dp__.setitem(_dp_prepare_ns, "__annotations__", _dp_class_annotations)
    __dp__.setitem(_dp_class_annotations, "x", int)
    y = 1
    __dp__.setitem(_dp_temp_ns, "y", y)
    __dp__.setitem(_dp_prepare_ns, "y", y)
    __dp__.setitem(_dp_class_annotations, "y", str)
def _dp_make_class_C():
    orig_bases = ()
    bases = __dp__.resolve_bases(orig_bases)
    _dp_tmp_4 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_4, 0)
    ns = __dp__.getitem(_dp_tmp_4, 1)
    kwds = __dp__.getitem(_dp_tmp_4, 2)
    _dp_ns_C(ns)
    _dp_tmp_6 = __dp__.is_not(orig_bases, bases)
    _dp_tmp_5 = _dp_tmp_6
    if _dp_tmp_5:
        _dp_tmp_7 = __dp__.not_(__dp__.contains(ns, "__orig_bases__"))
        _dp_tmp_5 = _dp_tmp_7
    if _dp_tmp_5:
        __dp__.setitem(ns, "__orig_bases__", orig_bases)
    return meta("C", bases, ns, **kwds)
_dp_class_C = _dp_make_class_C()
C = _dp_class_C

$ captures outer reference

class C:
    x = x
=
def _dp_ns_C(_dp_prepare_ns, x=x):
    _dp_temp_ns = __dp__.dict()
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_dp_prepare_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_dp_prepare_ns, "__qualname__", _dp_tmp_1)
    _dp_class_annotations = _dp_temp_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()
    x = x
    __dp__.setitem(_dp_temp_ns, "x", x)
    __dp__.setitem(_dp_prepare_ns, "x", x)
def _dp_make_class_C():
    orig_bases = ()
    bases = __dp__.resolve_bases(orig_bases)
    _dp_tmp_3 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_3, 0)
    ns = __dp__.getitem(_dp_tmp_3, 1)
    kwds = __dp__.getitem(_dp_tmp_3, 2)
    _dp_ns_C(ns)
    _dp_tmp_5 = __dp__.is_not(orig_bases, bases)
    _dp_tmp_4 = _dp_tmp_5
    if _dp_tmp_4:
        _dp_tmp_6 = __dp__.not_(__dp__.contains(ns, "__orig_bases__"))
        _dp_tmp_4 = _dp_tmp_6
    if _dp_tmp_4:
        __dp__.setitem(ns, "__orig_bases__", orig_bases)
    return meta("C", bases, ns, **kwds)
_dp_class_C = _dp_make_class_C()
C = _dp_class_C

$ captures names used in annotations

T = object()

class C:
    x: T
=
T = object()
def _dp_ns_C(_dp_prepare_ns):
    _dp_temp_ns = __dp__.dict()
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_dp_prepare_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_dp_prepare_ns, "__qualname__", _dp_tmp_1)
    _dp_class_annotations = _dp_temp_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()
    _dp_tmp_3 = __dp__.is_(_dp_temp_ns.get("__annotations__"), None)
    if _dp_tmp_3:
        __dp__.setitem(_dp_temp_ns, "__annotations__", _dp_class_annotations)
    __dp__.setitem(_dp_prepare_ns, "__annotations__", _dp_class_annotations)
    __dp__.setitem(_dp_class_annotations, "x", T)
def _dp_make_class_C():
    orig_bases = ()
    bases = __dp__.resolve_bases(orig_bases)
    _dp_tmp_4 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_4, 0)
    ns = __dp__.getitem(_dp_tmp_4, 1)
    kwds = __dp__.getitem(_dp_tmp_4, 2)
    _dp_ns_C(ns)
    _dp_tmp_6 = __dp__.is_not(orig_bases, bases)
    _dp_tmp_5 = _dp_tmp_6
    if _dp_tmp_5:
        _dp_tmp_7 = __dp__.not_(__dp__.contains(ns, "__orig_bases__"))
        _dp_tmp_5 = _dp_tmp_7
    if _dp_tmp_5:
        __dp__.setitem(ns, "__orig_bases__", orig_bases)
    return meta("C", bases, ns, **kwds)
_dp_class_C = _dp_make_class_C()
C = _dp_class_C

$ preserves class locals for references

class C:
    x = 1
    y = x
=
def _dp_ns_C(_dp_prepare_ns):
    _dp_temp_ns = __dp__.dict()
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_dp_prepare_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_dp_prepare_ns, "__qualname__", _dp_tmp_1)
    _dp_class_annotations = _dp_temp_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()
    x = 1
    __dp__.setitem(_dp_temp_ns, "x", x)
    __dp__.setitem(_dp_prepare_ns, "x", x)
    y = x
    __dp__.setitem(_dp_temp_ns, "y", y)
    __dp__.setitem(_dp_prepare_ns, "y", y)
def _dp_make_class_C():
    orig_bases = ()
    bases = __dp__.resolve_bases(orig_bases)
    _dp_tmp_3 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_3, 0)
    ns = __dp__.getitem(_dp_tmp_3, 1)
    kwds = __dp__.getitem(_dp_tmp_3, 2)
    _dp_ns_C(ns)
    _dp_tmp_5 = __dp__.is_not(orig_bases, bases)
    _dp_tmp_4 = _dp_tmp_5
    if _dp_tmp_4:
        _dp_tmp_6 = __dp__.not_(__dp__.contains(ns, "__orig_bases__"))
        _dp_tmp_4 = _dp_tmp_6
    if _dp_tmp_4:
        __dp__.setitem(ns, "__orig_bases__", orig_bases)
    return meta("C", bases, ns, **kwds)
_dp_class_C = _dp_make_class_C()
C = _dp_class_C

$ lowers inherits

class C(B):
    pass
=
def _dp_ns_C(_dp_prepare_ns):
    _dp_temp_ns = __dp__.dict()
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_dp_prepare_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_dp_prepare_ns, "__qualname__", _dp_tmp_1)
    _dp_class_annotations = _dp_temp_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()
def _dp_make_class_C():
    orig_bases = B,
    bases = __dp__.resolve_bases(orig_bases)
    _dp_tmp_3 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_3, 0)
    ns = __dp__.getitem(_dp_tmp_3, 1)
    kwds = __dp__.getitem(_dp_tmp_3, 2)
    _dp_ns_C(ns)
    _dp_tmp_5 = __dp__.is_not(orig_bases, bases)
    _dp_tmp_4 = _dp_tmp_5
    if _dp_tmp_4:
        _dp_tmp_6 = __dp__.not_(__dp__.contains(ns, "__orig_bases__"))
        _dp_tmp_4 = _dp_tmp_6
    if _dp_tmp_4:
        __dp__.setitem(ns, "__orig_bases__", orig_bases)
    return meta("C", bases, ns, **kwds)
_dp_class_C = _dp_make_class_C()
C = _dp_class_C

$ lowers with docstring and keywords

class C(B, metaclass=Meta, kw=1):
    'doc'
    x = 2
=
def _dp_ns_C(_dp_prepare_ns):
    _dp_temp_ns = __dp__.dict()
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_dp_prepare_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_dp_prepare_ns, "__qualname__", _dp_tmp_1)
    __doc__ = 'doc'
    __dp__.setitem(_dp_temp_ns, "__doc__", __doc__)
    __dp__.setitem(_dp_prepare_ns, "__doc__", __doc__)
    _dp_class_annotations = _dp_temp_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()
    x = 2
    __dp__.setitem(_dp_temp_ns, "x", x)
    __dp__.setitem(_dp_prepare_ns, "x", x)
def _dp_make_class_C():
    orig_bases = B,
    bases = __dp__.resolve_bases(orig_bases)
    _dp_tmp_3 = __dp__.prepare_class("C", bases, __dp__.dict((("metaclass", Meta), ("kw", 1))))
    meta = __dp__.getitem(_dp_tmp_3, 0)
    ns = __dp__.getitem(_dp_tmp_3, 1)
    kwds = __dp__.getitem(_dp_tmp_3, 2)
    _dp_ns_C(ns)
    _dp_tmp_5 = __dp__.is_not(orig_bases, bases)
    _dp_tmp_4 = _dp_tmp_5
    if _dp_tmp_4:
        _dp_tmp_6 = __dp__.not_(__dp__.contains(ns, "__orig_bases__"))
        _dp_tmp_4 = _dp_tmp_6
    if _dp_tmp_4:
        __dp__.setitem(ns, "__orig_bases__", orig_bases)
    return meta("C", bases, ns, **kwds)
_dp_class_C = _dp_make_class_C()
C = _dp_class_C

$ lowers method

class C:
    def m(self):
        return 1
=
def _dp_meth_C_m(self):
    return 1
def _dp_ns_C(_dp_prepare_ns):
    _dp_temp_ns = __dp__.dict()
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_dp_prepare_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_dp_prepare_ns, "__qualname__", _dp_tmp_1)
    _dp_class_annotations = _dp_temp_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()
    __dp__.setattr(_dp_meth_C_m, "__qualname__", __dp__.add(__dp__.getitem(_dp_prepare_ns, "__qualname__"), ".m"))
    m = _dp_meth_C_m
    __dp__.setitem(_dp_temp_ns, "m", m)
    __dp__.setitem(_dp_prepare_ns, "m", m)
def _dp_make_class_C():
    orig_bases = ()
    bases = __dp__.resolve_bases(orig_bases)
    _dp_tmp_3 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_3, 0)
    ns = __dp__.getitem(_dp_tmp_3, 1)
    kwds = __dp__.getitem(_dp_tmp_3, 2)
    _dp_ns_C(ns)
    _dp_tmp_5 = __dp__.is_not(orig_bases, bases)
    _dp_tmp_4 = _dp_tmp_5
    if _dp_tmp_4:
        _dp_tmp_6 = __dp__.not_(__dp__.contains(ns, "__orig_bases__"))
        _dp_tmp_4 = _dp_tmp_6
    if _dp_tmp_4:
        __dp__.setitem(ns, "__orig_bases__", orig_bases)
    return meta("C", bases, ns, **kwds)
_dp_class_C = _dp_make_class_C()
C = _dp_class_C
$ rewrites super and class

class C:
    def m(self):
        return super().m()
=
def _dp_meth_C_m(self):
    return super(C, self).m()
def _dp_ns_C(_dp_prepare_ns):
    _dp_temp_ns = __dp__.dict()
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_dp_prepare_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_dp_prepare_ns, "__qualname__", _dp_tmp_1)
    _dp_class_annotations = _dp_temp_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()
    __dp__.setattr(_dp_meth_C_m, "__qualname__", __dp__.add(__dp__.getitem(_dp_prepare_ns, "__qualname__"), ".m"))
    m = _dp_meth_C_m
    __dp__.setitem(_dp_temp_ns, "m", m)
    __dp__.setitem(_dp_prepare_ns, "m", m)
def _dp_make_class_C():
    orig_bases = ()
    bases = __dp__.resolve_bases(orig_bases)
    _dp_tmp_3 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_3, 0)
    ns = __dp__.getitem(_dp_tmp_3, 1)
    kwds = __dp__.getitem(_dp_tmp_3, 2)
    _dp_ns_C(ns)
    _dp_tmp_5 = __dp__.is_not(orig_bases, bases)
    _dp_tmp_4 = _dp_tmp_5
    if _dp_tmp_4:
        _dp_tmp_6 = __dp__.not_(__dp__.contains(ns, "__orig_bases__"))
        _dp_tmp_4 = _dp_tmp_6
    if _dp_tmp_4:
        __dp__.setitem(ns, "__orig_bases__", orig_bases)
    return meta("C", bases, ns, **kwds)
_dp_class_C = _dp_make_class_C()
C = _dp_class_C
$ rewrites super uses first arg

class C:
    def m(z):
        return super().m()
=
def _dp_meth_C_m(z):
    return super(C, z).m()
def _dp_ns_C(_dp_prepare_ns):
    _dp_temp_ns = __dp__.dict()
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_dp_prepare_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_dp_prepare_ns, "__qualname__", _dp_tmp_1)
    _dp_class_annotations = _dp_temp_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()

    __dp__.setattr(_dp_meth_C_m, "__qualname__", __dp__.add(__dp__.getitem(_dp_prepare_ns, "__qualname__"), ".m"))
    m = _dp_meth_C_m
    __dp__.setitem(_dp_temp_ns, "m", m)
    __dp__.setitem(_dp_prepare_ns, "m", m)
def _dp_make_class_C():
    orig_bases = ()
    bases = __dp__.resolve_bases(orig_bases)
    _dp_tmp_3 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_3, 0)
    ns = __dp__.getitem(_dp_tmp_3, 1)
    kwds = __dp__.getitem(_dp_tmp_3, 2)
    _dp_ns_C(ns)
    _dp_tmp_5 = __dp__.is_not(orig_bases, bases)
    _dp_tmp_4 = _dp_tmp_5
    if _dp_tmp_4:
        _dp_tmp_6 = __dp__.not_(__dp__.contains(ns, "__orig_bases__"))
        _dp_tmp_4 = _dp_tmp_6
    if _dp_tmp_4:
        __dp__.setitem(ns, "__orig_bases__", orig_bases)
    return meta("C", bases, ns, **kwds)
_dp_class_C = _dp_make_class_C()
C = _dp_class_C
$ rewrites super without receiver

class C:
    def m():
        return super().m()
=
def _dp_meth_C_m():
    return super(C, None).m()
def _dp_ns_C(_dp_prepare_ns):
    _dp_temp_ns = __dp__.dict()
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_dp_prepare_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_dp_prepare_ns, "__qualname__", _dp_tmp_1)
    _dp_class_annotations = _dp_temp_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()

    __dp__.setattr(_dp_meth_C_m, "__qualname__", __dp__.add(__dp__.getitem(_dp_prepare_ns, "__qualname__"), ".m"))
    m = _dp_meth_C_m
    __dp__.setitem(_dp_temp_ns, "m", m)
    __dp__.setitem(_dp_prepare_ns, "m", m)
def _dp_make_class_C():
    orig_bases = ()
    bases = __dp__.resolve_bases(orig_bases)
    _dp_tmp_3 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_3, 0)
    ns = __dp__.getitem(_dp_tmp_3, 1)
    kwds = __dp__.getitem(_dp_tmp_3, 2)
    _dp_ns_C(ns)
    _dp_tmp_5 = __dp__.is_not(orig_bases, bases)
    _dp_tmp_4 = _dp_tmp_5
    if _dp_tmp_4:
        _dp_tmp_6 = __dp__.not_(__dp__.contains(ns, "__orig_bases__"))
        _dp_tmp_4 = _dp_tmp_6
    if _dp_tmp_4:
        __dp__.setitem(ns, "__orig_bases__", orig_bases)
    return meta("C", bases, ns, **kwds)
_dp_class_C = _dp_make_class_C()
C = _dp_class_C
$ applies decorators in namespace

class C:
    y = deco

    @decorator(y)
    @other
    def m(self):
        return self
=
def _dp_meth_C_m(self):
    return self
def _dp_ns_C(_dp_prepare_ns):
    _dp_temp_ns = __dp__.dict()
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_dp_prepare_ns, "__module__", __name__)
    _dp_tmp_1 = "C"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_dp_prepare_ns, "__qualname__", _dp_tmp_1)
    _dp_class_annotations = _dp_temp_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()
    y = deco
    __dp__.setitem(_dp_temp_ns, "y", y)
    __dp__.setitem(_dp_prepare_ns, "y", y)
    _dp_decorator_m_0 = decorator(y)
    _dp_decorator_m_1 = other
    __dp__.setattr(_dp_meth_C_m, "__qualname__", __dp__.add(__dp__.getitem(_dp_prepare_ns, "__qualname__"), ".m"))
    m = _dp_meth_C_m
    m = _dp_decorator_m_0(_dp_decorator_m_1(m))
    __dp__.setitem(_dp_temp_ns, "m", m)
    __dp__.setitem(_dp_prepare_ns, "m", m)
def _dp_make_class_C():
    orig_bases = ()
    bases = __dp__.resolve_bases(orig_bases)
    _dp_tmp_3 = __dp__.prepare_class("C", bases, None)
    meta = __dp__.getitem(_dp_tmp_3, 0)
    ns = __dp__.getitem(_dp_tmp_3, 1)
    kwds = __dp__.getitem(_dp_tmp_3, 2)
    _dp_ns_C(ns)
    _dp_tmp_5 = __dp__.is_not(orig_bases, bases)
    _dp_tmp_4 = _dp_tmp_5
    if _dp_tmp_4:
        _dp_tmp_6 = __dp__.not_(__dp__.contains(ns, "__orig_bases__"))
        _dp_tmp_4 = _dp_tmp_6
    if _dp_tmp_4:
        __dp__.setitem(ns, "__orig_bases__", orig_bases)
    return meta("C", bases, ns, **kwds)
_dp_class_C = _dp_make_class_C()
C = _dp_class_C
