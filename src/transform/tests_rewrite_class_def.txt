$ lowers simple class

class C:
    x = 1
=
def _dp_ns_C(_dp_ns):
    __dp__.setitem(_dp_ns, "__module__", __name__)
    __dp__.setitem(_dp_ns, "__qualname__", "C")
    __dp__.setitem(_dp_ns, "x", 1)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ collects class annotations

class C:
    x: int
    y: str = 1
=
def _dp_ns_C(_dp_ns):
    __dp__.setitem(_dp_ns, "__module__", __name__)
    __dp__.setitem(_dp_ns, "__qualname__", "C")
    __dp__.setitem(_dp_ns, "y", 1)
    _dp_class_annotations = _dp_ns.get("__annotations__")
    _dp_tmp_1 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_1:
        _dp_class_annotations = __dp__.dict()
    __dp__.setitem(_dp_ns, "__annotations__", _dp_class_annotations)
    __dp__.setitem(_dp_class_annotations, "x", int)
    __dp__.setitem(_dp_class_annotations, "y", str)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ captures outer reference

class C:
    x = x
=
def _dp_ns_C(_dp_ns):
    __dp__.setitem(_dp_ns, "__module__", __name__)
    __dp__.setitem(_dp_ns, "__qualname__", "C")
    __dp__.setitem(_dp_ns, "x", x)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ captures names used in annotations

T = object()

class C:
    x: T
=
T = object()
def _dp_ns_C(_dp_ns):
    __dp__.setitem(_dp_ns, "__module__", __name__)
    __dp__.setitem(_dp_ns, "__qualname__", "C")
    _dp_class_annotations = _dp_ns.get("__annotations__")
    _dp_tmp_1 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_1:
        _dp_class_annotations = __dp__.dict()
    __dp__.setitem(_dp_ns, "__annotations__", _dp_class_annotations)
    __dp__.setitem(_dp_class_annotations, "x", T)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ preserves class locals for references

class C:
    x = 1
    y = x
=
def _dp_ns_C(_dp_ns):
    __dp__.setitem(_dp_ns, "__module__", __name__)
    __dp__.setitem(_dp_ns, "__qualname__", "C")
    __dp__.setitem(_dp_ns, "x", 1)
    __dp__.setitem(_dp_ns, "y", __dp__.getitem(_dp_ns, "x"))
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ lowers inherits

class C(B):
    pass
=
def _dp_ns_C(_dp_ns):
    __dp__.setitem(_dp_ns, "__module__", __name__)
    __dp__.setitem(_dp_ns, "__qualname__", "C")
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (B,), None)
C = _dp_class_C
$ lowers with docstring and keywords

class C(B, metaclass=Meta, kw=1):
    'doc'
    x = 2
=
def _dp_ns_C(_dp_ns):
    __dp__.setitem(_dp_ns, "__module__", __name__)
    __dp__.setitem(_dp_ns, "__qualname__", "C")
    _dp_tmp_1 = 'doc'
    __dp__.setitem(_dp_ns, "__doc__", _dp_tmp_1)
    __dp__.setitem(_dp_ns, "x", 2)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (B,), __dp__.dict((("metaclass", Meta), ("kw", 1))))
C = _dp_class_C
$ lowers method

class C:
    def m(self):
        return 1
=
def _dp_ns_C(_dp_ns):
    __dp__.setitem(_dp_ns, "__module__", __name__)
    __dp__.setitem(_dp_ns, "__qualname__", "C")

    def m(self):
        return 1
    __dp__.setitem(_dp_ns, "m", m)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ rewrites super and class

class C:
    def m(self):
        return super().m()
=
def _dp_ns_C(_dp_ns):
    __dp__.setitem(_dp_ns, "__module__", __name__)
    __dp__.setitem(_dp_ns, "__qualname__", "C")

    def m(self):
        return super(C, self).m()
    __dp__.setitem(_dp_ns, "m", m)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ rewrites super uses first arg

class C:
    def m(z):
        return super().m()
=
def _dp_ns_C(_dp_ns):
    __dp__.setitem(_dp_ns, "__module__", __name__)
    __dp__.setitem(_dp_ns, "__qualname__", "C")

    def m(z):
        return super(C, z).m()
    __dp__.setitem(_dp_ns, "m", m)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ rewrites super without receiver

class C:
    def m():
        return super().m()
=
def _dp_ns_C(_dp_ns):
    __dp__.setitem(_dp_ns, "__module__", __name__)
    __dp__.setitem(_dp_ns, "__qualname__", "C")

    def m():
        return super(C, None).m()
    __dp__.setitem(_dp_ns, "m", m)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ applies decorators in namespace

class C:
    y = deco

    @decorator(y)
    @other
    def m(self):
        return self
=
def _dp_ns_C(_dp_ns):
    __dp__.setitem(_dp_ns, "__module__", __name__)
    __dp__.setitem(_dp_ns, "__qualname__", "C")
    __dp__.setitem(_dp_ns, "y", deco)
    _dp_decorator_m_0 = decorator(__dp__.getitem(_dp_ns, "y"))
    _dp_decorator_m_1 = other

    def m(self):
        return self
    __dp__.setitem(_dp_ns, "m", _dp_decorator_m_0(_dp_decorator_m_1(m)))
    __dp__.setitem(_dp_ns, "m", __dp__.getitem(_dp_ns, "m"))
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ renames class stores and uses

class C:
    a = 1
    b = a

    def f(self, value: b = a):
        return value
=
def _dp_ns_C(_dp_ns):
    __dp__.setitem(_dp_ns, "__module__", __name__)
    __dp__.setitem(_dp_ns, "__qualname__", "C")
    __dp__.setitem(_dp_ns, "a", 1)
    __dp__.setitem(_dp_ns, "b", __dp__.getitem(_dp_ns, "a"))

    def f(self, value: __dp__.getitem(_dp_ns, "b")=__dp__.getitem(_dp_ns, "a")):
        return value
    __dp__.setitem(_dp_ns, "f", f)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ nested class uses outer binding in bases

class Outer:
    x = 1

    class Inner(x):
        pass
=
def _dp_ns_Outer_Inner(_dp_ns):
    __dp__.setitem(_dp_ns, "__module__", __name__)
    __dp__.setitem(_dp_ns, "__qualname__", "Outer.Inner")
def _dp_ns_Outer(_dp_ns):
    __dp__.setitem(_dp_ns, "__module__", __name__)
    __dp__.setitem(_dp_ns, "__qualname__", "Outer")
    __dp__.setitem(_dp_ns, "x", 1)
    _dp_tmp_1 = __dp__.create_class("Inner", _dp_ns_Outer_Inner, (__dp__.getitem(_dp_ns, "x"),), None)
    __dp__.setitem(_dp_ns, "Inner", _dp_tmp_1)
_dp_class_Outer = __dp__.create_class("Outer", _dp_ns_Outer, (), None)
Outer = _dp_class_Outer
$ function local class remains scoped

class Example:
    def trigger(self):
        class Token:
            pass
        return Token
=
def _dp_ns_Example(_dp_ns):
    __dp__.setitem(_dp_ns, "__module__", __name__)
    __dp__.setitem(_dp_ns, "__qualname__", "Example")

    def trigger(self):

        def _dp_ns_Example_trigger__locals__Token(_dp_ns):
            __dp__.setitem(_dp_ns, "__module__", __name__)
            __dp__.setitem(_dp_ns, "__qualname__", "Example.trigger.<locals>.Token")
        _dp_class_Example_trigger__locals__Token = __dp__.create_class("Token", _dp_ns_Example_trigger__locals__Token, (), None)
        Token = _dp_class_Example_trigger__locals__Token
        return Token
    __dp__.setitem(_dp_ns, "trigger", trigger)
_dp_class_Example = __dp__.create_class("Example", _dp_ns_Example, (), None)
Example = _dp_class_Example
$ function local class nested in if

class Example:
    def trigger(self, flag):
        if flag:
            class Token:
                pass
            return Token
        return None
=
def _dp_ns_Example(_dp_ns):
    __dp__.setitem(_dp_ns, "__module__", __name__)
    __dp__.setitem(_dp_ns, "__qualname__", "Example")

    def trigger(self, flag):
        if flag:

            def _dp_ns_Example_trigger__locals__Token(_dp_ns):
                __dp__.setitem(_dp_ns, "__module__", __name__)
                __dp__.setitem(_dp_ns, "__qualname__", "Example.trigger.<locals>.Token")
            _dp_class_Example_trigger__locals__Token = __dp__.create_class("Token", _dp_ns_Example_trigger__locals__Token, (), None)
            Token = _dp_class_Example_trigger__locals__Token
            return Token
        return None
    __dp__.setitem(_dp_ns, "trigger", trigger)
_dp_class_Example = __dp__.create_class("Example", _dp_ns_Example, (), None)
Example = _dp_class_Example
$ function local methods capture locals

def outer():
    value = 1

    class C:
        def method(self):
            return value

    return C
=
def outer():
    value = 1

    def _dp_ns_outer__locals__C(_dp_ns):
        __dp__.setitem(_dp_ns, "__module__", __name__)
        __dp__.setitem(_dp_ns, "__qualname__", "outer.<locals>.C")

        def method(self):
            return value
        __dp__.setitem(_dp_ns, "method", method)
    _dp_class_outer__locals__C = __dp__.create_class("C", _dp_ns_outer__locals__C, (), None)
    C = _dp_class_outer__locals__C
    return C
