$ lowers simple class

class C:
    x = 1
=
def _dp_ns_C(_dp_prepare_ns, _dp_add_binding):
    _dp_add_binding("__module__", __name__)
    _dp_add_binding("__qualname__", "C")
    _dp_class_annotations = _dp_prepare_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()
    _dp_var_x_1 = _dp_add_binding("x", 1)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ collects class annotations

class C:
    x: int
    y: str = 1
=
def _dp_ns_C(_dp_prepare_ns, _dp_add_binding):
    _dp_add_binding("__module__", __name__)
    _dp_add_binding("__qualname__", "C")
    _dp_class_annotations = _dp_prepare_ns.get("__annotations__")
    _dp_tmp_3 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_3:
        _dp_class_annotations = __dp__.dict()
    _dp_add_binding("__annotations__", _dp_class_annotations)
    __dp__.setitem(_dp_class_annotations, "x", int)
    _dp_var_y_2 = _dp_add_binding("y", 1)
    __dp__.setitem(_dp_class_annotations, "y", str)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ captures outer reference

class C:
    x = x
=
def _dp_ns_C(_dp_prepare_ns, _dp_add_binding):
    _dp_add_binding("__module__", __name__)
    _dp_add_binding("__qualname__", "C")
    _dp_class_annotations = _dp_prepare_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()
    _dp_var_x_1 = _dp_add_binding("x", x)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ captures names used in annotations

T = object()

class C:
    x: T
=
T = object()
def _dp_ns_C(_dp_prepare_ns, _dp_add_binding):
    _dp_add_binding("__module__", __name__)
    _dp_add_binding("__qualname__", "C")
    _dp_class_annotations = _dp_prepare_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()
    _dp_add_binding("__annotations__", _dp_class_annotations)
    __dp__.setitem(_dp_class_annotations, "x", T)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ preserves class locals for references

class C:
    x = 1
    y = x
=
def _dp_ns_C(_dp_prepare_ns, _dp_add_binding):
    _dp_add_binding("__module__", __name__)
    _dp_add_binding("__qualname__", "C")
    _dp_class_annotations = _dp_prepare_ns.get("__annotations__")
    _dp_tmp_3 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_3:
        _dp_class_annotations = __dp__.dict()
    _dp_var_x_1 = _dp_add_binding("x", 1)
    _dp_var_y_2 = _dp_add_binding("y", _dp_var_x_1)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ lowers inherits

class C(B):
    pass
=
def _dp_ns_C(_dp_prepare_ns, _dp_add_binding):
    _dp_add_binding("__module__", __name__)
    _dp_add_binding("__qualname__", "C")
    _dp_class_annotations = _dp_prepare_ns.get("__annotations__")
    _dp_tmp_1 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_1:
        _dp_class_annotations = __dp__.dict()
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (B,), None)
C = _dp_class_C
$ lowers with docstring and keywords

class C(B, metaclass=Meta, kw=1):
    'doc'
    x = 2
=
def _dp_ns_C(_dp_prepare_ns, _dp_add_binding):
    _dp_add_binding("__module__", __name__)
    _dp_add_binding("__qualname__", "C")
    __doc__ = _dp_add_binding("__doc__", 'doc')
    _dp_class_annotations = _dp_prepare_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()
    _dp_var_x_1 = _dp_add_binding("x", 2)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (B,), __dp__.dict((("metaclass", Meta), ("kw", 1))))
C = _dp_class_C
$ lowers method

class C:
    def m(self):
        return 1
=
def _dp_ns_C(_dp_prepare_ns, _dp_add_binding):
    _dp_add_binding("__module__", __name__)
    _dp_add_binding("__qualname__", "C")
    _dp_class_annotations = _dp_prepare_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()

    def _dp_var_m_1(self):
        return 1
    _dp_var_m_1 = _dp_add_binding("m", _dp_var_m_1)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ rewrites super and class

class C:
    def m(self):
        return super().m()
=
def _dp_ns_C(_dp_prepare_ns, _dp_add_binding):
    _dp_add_binding("__module__", __name__)
    _dp_add_binding("__qualname__", "C")
    _dp_class_annotations = _dp_prepare_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()

    def _dp_var_m_1(self):
        return super(C, self).m()
    _dp_var_m_1 = _dp_add_binding("m", _dp_var_m_1)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ rewrites super uses first arg

class C:
    def m(z):
        return super().m()
=
def _dp_ns_C(_dp_prepare_ns, _dp_add_binding):
    _dp_add_binding("__module__", __name__)
    _dp_add_binding("__qualname__", "C")
    _dp_class_annotations = _dp_prepare_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()

    def _dp_var_m_1(z):
        return super(C, z).m()
    _dp_var_m_1 = _dp_add_binding("m", _dp_var_m_1)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ rewrites super without receiver

class C:
    def m():
        return super().m()
=
def _dp_ns_C(_dp_prepare_ns, _dp_add_binding):
    _dp_add_binding("__module__", __name__)
    _dp_add_binding("__qualname__", "C")
    _dp_class_annotations = _dp_prepare_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()

    def _dp_var_m_1():
        return super(C, None).m()
    _dp_var_m_1 = _dp_add_binding("m", _dp_var_m_1)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ applies decorators in namespace

class C:
    y = deco

    @decorator(y)
    @other
    def m(self):
        return self
=
def _dp_ns_C(_dp_prepare_ns, _dp_add_binding):
    _dp_add_binding("__module__", __name__)
    _dp_add_binding("__qualname__", "C")
    _dp_class_annotations = _dp_prepare_ns.get("__annotations__")
    _dp_tmp_3 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_3:
        _dp_class_annotations = __dp__.dict()
    _dp_var_y_1 = _dp_add_binding("y", deco)
    _dp_decorator__dp_var_m_2_0 = decorator(_dp_var_y_1)
    _dp_decorator__dp_var_m_2_1 = other

    def _dp_var_m_2(self):
        return self
    _dp_var_m_2 = _dp_decorator__dp_var_m_2_0(_dp_decorator__dp_var_m_2_1(_dp_var_m_2))
    _dp_var_m_2 = _dp_add_binding("m", _dp_var_m_2)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ renames class stores and uses

class C:
    a = 1
    b = a

    def f(self, value: b = a):
        return value
=
def _dp_ns_C(_dp_prepare_ns, _dp_add_binding):
    _dp_add_binding("__module__", __name__)
    _dp_add_binding("__qualname__", "C")
    _dp_class_annotations = _dp_prepare_ns.get("__annotations__")
    _dp_tmp_4 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_4:
        _dp_class_annotations = __dp__.dict()
    _dp_var_a_1 = _dp_add_binding("a", 1)
    _dp_var_b_2 = _dp_add_binding("b", _dp_var_a_1)

    def _dp_var_f_3(self, value: _dp_var_b_2=_dp_var_a_1):
        return value
    _dp_var_f_3 = _dp_add_binding("f", _dp_var_f_3)
_dp_class_C = __dp__.create_class("C", _dp_ns_C, (), None)
C = _dp_class_C
$ nested class uses outer binding in bases

class Outer:
    x = 1

    class Inner(x):
        pass
=
def _dp_ns_Outer_Inner(_dp_prepare_ns, _dp_add_binding):
    _dp_add_binding("__module__", __name__)
    _dp_add_binding("__qualname__", "Outer.Inner")
    _dp_class_annotations = _dp_prepare_ns.get("__annotations__")
    _dp_tmp_3 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_3:
        _dp_class_annotations = __dp__.dict()
def _dp_ns_Outer(_dp_prepare_ns, _dp_add_binding):
    _dp_add_binding("__module__", __name__)
    _dp_add_binding("__qualname__", "Outer")
    _dp_class_annotations = _dp_prepare_ns.get("__annotations__")
    _dp_tmp_4 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_4:
        _dp_class_annotations = __dp__.dict()
    _dp_var_x_1 = _dp_add_binding("x", 1)
    _dp_tmp_2 = __dp__.create_class("Inner", _dp_ns_Outer_Inner, (_dp_var_x_1,), None)
    Inner = _dp_add_binding("Inner", _dp_tmp_2)
_dp_class_Outer = __dp__.create_class("Outer", _dp_ns_Outer, (), None)
Outer = _dp_class_Outer
