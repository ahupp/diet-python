$ strips type alias statement

type Alias = int
=

$ strips type aliases in if branches

if True:
    type Alias = int
    x = 1
elif False:
    type Alias = str
    y = 2
else:
    type Alias = bytes
    z = 3
=
if True:
    x = 1
else:
    if False:
        y = 2
    else:
        z = 3

$ strips type alias from class body

type Alias = int

class Foo:
    type Inner = str

    def method(self):
        return 1
=
def _dp_meth_Foo_method(self):
    return 1
def _dp_ns_Foo(_dp_prepare_ns):
    _dp_temp_ns = __dp__.dict()
    __dp__.setitem(_dp_temp_ns, "__module__", __name__)
    __dp__.setitem(_dp_prepare_ns, "__module__", __name__)
    _dp_tmp_1 = "Foo"
    __dp__.setitem(_dp_temp_ns, "__qualname__", _dp_tmp_1)
    __dp__.setitem(_dp_prepare_ns, "__qualname__", _dp_tmp_1)
    _dp_class_annotations = _dp_temp_ns.get("__annotations__")
    _dp_tmp_2 = __dp__.is_(_dp_class_annotations, None)
    if _dp_tmp_2:
        _dp_class_annotations = __dp__.dict()

    __dp__.setattr(_dp_meth_Foo_method, "__qualname__", __dp__.add(__dp__.getitem(_dp_prepare_ns, "__qualname__"), ".method"))
    method = _dp_meth_Foo_method
    __dp__.setitem(_dp_temp_ns, "method", method)
    __dp__.setitem(_dp_prepare_ns, "method", method)
def _dp_make_class_Foo():
    orig_bases = ()
    bases = __dp__.resolve_bases(orig_bases)
    _dp_tmp_3 = __dp__.prepare_class("Foo", bases, None)
    meta = __dp__.getitem(_dp_tmp_3, 0)
    ns = __dp__.getitem(_dp_tmp_3, 1)
    kwds = __dp__.getitem(_dp_tmp_3, 2)
    _dp_ns_Foo(ns)
    _dp_tmp_5 = __dp__.is_not(orig_bases, bases)
    _dp_tmp_4 = _dp_tmp_5
    if _dp_tmp_4:
        _dp_tmp_6 = __dp__.not_(__dp__.contains(ns, "__orig_bases__"))
        _dp_tmp_4 = _dp_tmp_6
    if _dp_tmp_4:
        __dp__.setitem(ns, "__orig_bases__", orig_bases)
    return meta("Foo", bases, ns, **kwds)
_dp_class_Foo = _dp_make_class_Foo()
Foo = _dp_class_Foo
