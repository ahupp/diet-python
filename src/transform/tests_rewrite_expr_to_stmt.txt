$ rewrites bool and assignment

x = a and b
=
_dp_tmp_1 = a
if _dp_tmp_1:
    _dp_tmp_1 = b
x = _dp_tmp_1

$ skips non bool assignment

x = value
=
x = value

$ rewrites bool expr statement

a and b
=
_dp_tmp_1 = a
if _dp_tmp_1:
    _dp_tmp_1 = b
_dp_tmp_1

$ rewrites simple compare assignment

x = a == b
=
_dp_tmp_1 = __dp__.eq(a, b)
x = _dp_tmp_1

$ rewrites chained compare assignment

x = a < b < c
=
_dp_tmp_1 = __dp__.lt(a, b)
if _dp_tmp_1:
    _dp_tmp_1 = __dp__.lt(b, c)
x = _dp_tmp_1

$ rewrites multi chained compare assignment

x = a < b <= c < d
=
_dp_tmp_1 = __dp__.lt(a, b)
if _dp_tmp_1:
    _dp_tmp_1 = __dp__.le(b, c)
if _dp_tmp_1:
    _dp_tmp_1 = __dp__.lt(c, d)
x = _dp_tmp_1

$ rewrites lambda in return stmt

return lambda: 1
=
def _dp_lambda_1():
    return 1
return _dp_lambda_1

$ rewrites lambda assignment

x = lambda: 1
=
def _dp_lambda_1():
    return 1
x = _dp_lambda_1

$ rewrites generator assignment

x = (i for i in items)
=
def _dp_gen_1(items):
    _dp_iter_2 = __dp__.iter(items)
    while True:
        try:
            i = __dp__.next(_dp_iter_2)
        except:
            __dp__.check_stopiteration()
            break
        else:
            yield i
x = _dp_gen_1(__dp__.iter(items))
