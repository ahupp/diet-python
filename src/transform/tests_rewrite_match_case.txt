$ rewrites simple match

match x:
    case 1:
        a()
    case 2:
        b()
    case _:
        c()
=
_dp_match_1 = x
_dp_tmp_2 = __dp__.eq(_dp_match_1, 1)
if _dp_tmp_2:
    a()
else:
    _dp_tmp_3 = __dp__.eq(_dp_match_1, 2)
    if _dp_tmp_3:
        b()
    else:
        c()

$ rewrites match with guard

match x:
    case 1 if cond:
        a()
    case _:
        b()
=
_dp_match_1 = x
_dp_tmp_2 = __dp__.eq(_dp_match_1, 1)
if _dp_tmp_2:
    if cond:
        a()
    else:
        b()
else:
    b()

$ rewrites guard with capture binding

match x:
    case iterable if not hasattr(iterable, "__next__"):
        a()
    case _:
        b()
=
_dp_match_1 = x
iterable = _dp_match_1
if __dp__.not_(hasattr(iterable, "__next__")):
    a()
else:
    del iterable
    b()

$ rewrites guard with assignment and test

match x:
    case 1 as y if cond(y):
        a()
    case _:
        b()
=
_dp_match_1 = x
_dp_tmp_2 = __dp__.eq(_dp_match_1, 1)
if _dp_tmp_2:
    y = _dp_match_1
    if cond(y):
        a()
    else:
        del y
        b()
else:
    b()

$ rewrites match or pattern

match x:
    case 1 | 2:
        a()
    case _:
        b()
=
_dp_match_1 = x
_dp_tmp_3 = __dp__.eq(_dp_match_1, 1)
_dp_tmp_2 = _dp_tmp_3
if __dp__.not_(_dp_tmp_2):
    _dp_tmp_4 = __dp__.eq(_dp_match_1, 2)
    _dp_tmp_2 = _dp_tmp_4
if _dp_tmp_2:
    a()
else:
    b()

$ rewrites match singleton

match x:
    case None:
        a()
    case _:
        b()
=
_dp_match_1 = x
_dp_tmp_2 = __dp__.is_(_dp_match_1, None)
if _dp_tmp_2:
    a()
else:
    b()

$ rewrites match as pattern

match x:
    case 1 as y:
        a()
    case _:
        b()
=
_dp_match_1 = x
_dp_tmp_2 = __dp__.eq(_dp_match_1, 1)
if _dp_tmp_2:
    y = _dp_match_1
    a()
else:
    b()

$ rewrites match capture pattern

match x:
    case 1:
        a()
    case y:
        b()
=
_dp_match_1 = x
_dp_tmp_2 = __dp__.eq(_dp_match_1, 1)
if _dp_tmp_2:
    a()
else:
    y = _dp_match_1
    b()

$ rewrites match class with match args

match x:
    case C(1, b):
        a()
    case _:
        c()
=
_dp_match_1 = x
_dp_tmp_2 = isinstance(_dp_match_1, C)
if _dp_tmp_2:
    _dp_tmp_2 = __dp__.match_class_attr_exists(C, _dp_match_1, 0, 2)
if _dp_tmp_2:
    _dp_tmp_3 = __dp__.eq(__dp__.match_class_attr_value(C, _dp_match_1, 0, 2), 1)
    _dp_tmp_2 = _dp_tmp_3
if _dp_tmp_2:
    _dp_tmp_2 = __dp__.match_class_attr_exists(C, _dp_match_1, 1, 2)
if _dp_tmp_2:
    b = __dp__.match_class_attr_value(C, _dp_match_1, 1, 2)
    a()
else:
    c()

$ rewrites match sequence pattern

match x:
    case [a, 2]:
        a()
    case _:
        b()
=
_dp_match_1 = x
_dp_tmp_2 = hasattr(_dp_match_1, '__len__')
if _dp_tmp_2:
    _dp_tmp_2 = hasattr(_dp_match_1, '__getitem__')
if _dp_tmp_2:
    _dp_tmp_2 = __dp__.not_(isinstance(_dp_match_1, (str, bytes, bytearray)))
if _dp_tmp_2:
    _dp_tmp_3 = __dp__.eq(len(_dp_match_1), 2)
    _dp_tmp_2 = _dp_tmp_3
if _dp_tmp_2:
    _dp_tmp_4 = __dp__.eq(__dp__.getitem(_dp_match_1, 1), 2)
    _dp_tmp_2 = _dp_tmp_4
if _dp_tmp_2:
    a = __dp__.getitem(_dp_match_1, 0)
    a()
else:
    b()

$ rewrites match sequence with star

match x:
    case [first, *rest, last]:
        a()
    case _:
        b()
=
_dp_match_1 = x
_dp_tmp_2 = hasattr(_dp_match_1, '__len__')
if _dp_tmp_2:
    _dp_tmp_2 = hasattr(_dp_match_1, '__getitem__')
if _dp_tmp_2:
    _dp_tmp_2 = __dp__.not_(isinstance(_dp_match_1, (str, bytes, bytearray)))
if _dp_tmp_2:
    _dp_tmp_3 = __dp__.ge(len(_dp_match_1), 2)
    _dp_tmp_2 = _dp_tmp_3
if _dp_tmp_2:
    first = __dp__.getitem(_dp_match_1, 0)
    rest = __dp__.list(__dp__.getitem(_dp_match_1, __dp__.slice(1, __dp__.sub(len(_dp_match_1), 1), None)))
    last = __dp__.getitem(_dp_match_1, __dp__.sub(len(_dp_match_1), 1))
    a()
else:
    b()

$ rewrites match mapping pattern

match x:
    case {"a": a, "b": 2, **rest}:
        a()
    case _:
        b()
=
_dp_match_1 = x
_dp_tmp_2 = hasattr(_dp_match_1, 'keys')
if _dp_tmp_2:
    _dp_tmp_2 = hasattr(_dp_match_1, '__getitem__')
if _dp_tmp_2:
    _dp_tmp_3 = __dp__.contains(_dp_match_1, "a")
    _dp_tmp_2 = _dp_tmp_3
if _dp_tmp_2:
    _dp_tmp_4 = __dp__.contains(_dp_match_1, "b")
    _dp_tmp_2 = _dp_tmp_4
if _dp_tmp_2:
    _dp_tmp_5 = __dp__.eq(__dp__.getitem(_dp_match_1, "b"), 2)
    _dp_tmp_2 = _dp_tmp_5
if _dp_tmp_2:
    a = __dp__.getitem(_dp_match_1, "a")
    rest = __dp__.dict(_dp_match_1)
    rest.pop("a", None)
    rest.pop("b", None)
    a()
else:
    b()

$ rewrites match or with assignments

match x:
    case (a, b) | [a, b]:
        a()
    case _:
        b()
=
_dp_match_1 = x
_dp_tmp_2 = hasattr(_dp_match_1, '__len__')
if _dp_tmp_2:
    _dp_tmp_2 = hasattr(_dp_match_1, '__getitem__')
if _dp_tmp_2:
    _dp_tmp_2 = __dp__.not_(isinstance(_dp_match_1, (str, bytes, bytearray)))
if _dp_tmp_2:
    _dp_tmp_7 = __dp__.eq(len(_dp_match_1), 2)
    _dp_tmp_2 = _dp_tmp_7
if __dp__.not_(_dp_tmp_2):
    _dp_tmp_2 = hasattr(_dp_match_1, '__len__')
    if _dp_tmp_2:
        _dp_tmp_2 = hasattr(_dp_match_1, '__getitem__')
    if _dp_tmp_2:
        _dp_tmp_2 = __dp__.not_(isinstance(_dp_match_1, (str, bytes, bytearray)))
    if _dp_tmp_2:
        _dp_tmp_8 = __dp__.eq(len(_dp_match_1), 2)
        _dp_tmp_2 = _dp_tmp_8
if _dp_tmp_2:
    _dp_tmp_3 = hasattr(_dp_match_1, '__len__')
    if _dp_tmp_3:
        _dp_tmp_3 = hasattr(_dp_match_1, '__getitem__')
    if _dp_tmp_3:
        _dp_tmp_3 = __dp__.not_(isinstance(_dp_match_1, (str, bytes, bytearray)))
    if _dp_tmp_3:
        _dp_tmp_6 = __dp__.eq(len(_dp_match_1), 2)
        _dp_tmp_3 = _dp_tmp_6
    if _dp_tmp_3:
        a = __dp__.getitem(_dp_match_1, 0)
        b = __dp__.getitem(_dp_match_1, 1)
    else:
        _dp_tmp_4 = hasattr(_dp_match_1, '__len__')
        if _dp_tmp_4:
            _dp_tmp_4 = hasattr(_dp_match_1, '__getitem__')
        if _dp_tmp_4:
            _dp_tmp_4 = __dp__.not_(isinstance(_dp_match_1, (str, bytes, bytearray)))
        if _dp_tmp_4:
            _dp_tmp_5 = __dp__.eq(len(_dp_match_1), 2)
            _dp_tmp_4 = _dp_tmp_5
        if _dp_tmp_4:
            a = __dp__.getitem(_dp_match_1, 0)
            b = __dp__.getitem(_dp_match_1, 1)
        else:
            pass
    a()
else:
    b()
